#!/bin/bash
# smart-review.sh - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π code review —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Å—Ç–µ–∫–∞

set -e

PR_NUMBER="${1:-}"
STACK_CONFIG="${2:-react-node}"
REVIEW_DEPTH="${3:-standard}"

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

if [ -z "$PR_NUMBER" ]; then
    echo -e "${RED}Error: PR number is required${NC}"
    echo "Usage: $0 <pr-number> [stack-config] [review-depth]"
    echo "Review depth: quick, standard, thorough, security"
    exit 1
fi

echo -e "${BLUE}üîç Smart Code Review Agent${NC}"
echo -e "PR: #$PR_NUMBER"
echo -e "Stack: $STACK_CONFIG"
echo -e "Depth: $REVIEW_DEPTH"
echo ""

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–µ–∫–∞
STACK_FILE="configs/stacks/${STACK_CONFIG}.json"
if [ ! -f "$STACK_FILE" ]; then
    echo -e "${RED}Error: Stack configuration not found: $STACK_FILE${NC}"
    exit 1
fi

# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PR
echo -e "${YELLOW}üì• Fetching PR information...${NC}"
gh pr view "$PR_NUMBER" --json title,body,author,files > "pr-${PR_NUMBER}-info.json"
gh pr diff "$PR_NUMBER" > "pr-${PR_NUMBER}-diff.patch"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å review
case "$REVIEW_DEPTH" in
    "quick")
        REVIEW_FOCUS="syntax, basic logic, obvious bugs"
        MAX_TURNS=3
        ;;
    "standard")
        REVIEW_FOCUS="code quality, best practices, performance, maintainability"
        MAX_TURNS=5
        ;;
    "thorough")
        REVIEW_FOCUS="architecture, design patterns, scalability, comprehensive testing"
        MAX_TURNS=8
        ;;
    "security")
        REVIEW_FOCUS="security vulnerabilities, data validation, authentication, authorization"
        MAX_TURNS=6
        ;;
    *)
        REVIEW_FOCUS="code quality, best practices, performance, maintainability"
        MAX_TURNS=5
        ;;
esac

echo -e "${YELLOW}üß† Analyzing changes with Claude...${NC}"

# –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è review
REVIEW_PROMPT="
You are an expert code reviewer specializing in $(jq -r '.name' "$STACK_FILE").

**Stack Configuration:**
$(cat "$STACK_FILE")

**PR Information:**
$(cat "pr-${PR_NUMBER}-info.json")

**Code Changes:**
\`\`\`diff
$(cat "pr-${PR_NUMBER}-diff.patch")
\`\`\`

**Review Focus:** $REVIEW_FOCUS

Please provide a comprehensive code review including:

1. **Overview** - Summary of changes and their purpose
2. **Code Quality** - Adherence to best practices for this stack
3. **Architecture** - Design decisions and patterns used
4. **Performance** - Potential performance implications
5. **Security** - Security considerations and vulnerabilities
6. **Testing** - Test coverage and quality
7. **Specific Issues** - Line-by-line feedback with file:line references
8. **Recommendations** - Concrete suggestions for improvement
9. **Approval Status** - Approve, Request Changes, or Comment

For each issue found, provide:
- File and line number
- Severity (critical, major, minor, suggestion)
- Detailed explanation
- Suggested fix

Format the output as structured markdown for easy GitHub integration.
"

# –ó–∞–ø—É—Å–∫–∞–µ–º Claude review
claude -p "$REVIEW_PROMPT" \
    --output-format json \
    --max-turns "$MAX_TURNS" \
    > "review-${PR_NUMBER}-${REVIEW_DEPTH}.json"

# –ò–∑–≤–ª–µ–∫–∞–µ–º review
jq -r '.result' "review-${PR_NUMBER}-${REVIEW_DEPTH}.json" > "review-${PR_NUMBER}-${REVIEW_DEPTH}.md"

echo -e "${GREEN}‚úÖ Review completed: review-${PR_NUMBER}-${REVIEW_DEPTH}.md${NC}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
if command -v gh >/dev/null 2>&1; then
    echo -e "${YELLOW}üí¨ Posting review comment...${NC}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å review
    COMMENT_BODY="## ü§ñ Automated Code Review

**Stack:** $(jq -r '.name' "$STACK_FILE")  
**Review Depth:** $REVIEW_DEPTH  
**Generated:** $(date)

$(cat "review-${PR_NUMBER}-${REVIEW_DEPTH}.md")

---
*Generated by Claude Squad Smart Review Agent*"

    # –ü–æ—Å—Ç–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    gh pr comment "$PR_NUMBER" --body "$COMMENT_BODY"
    
    echo -e "${GREEN}‚úÖ Review comment posted to PR #${PR_NUMBER}${NC}"
fi

# –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ review
echo -e "${YELLOW}üìä Generating review metrics...${NC}"

METRICS_PROMPT="
Based on the code review analysis, generate metrics and insights:

**Review Data:**
$(cat "review-${PR_NUMBER}-${REVIEW_DEPTH}.md")

Generate:
1. Code quality score (1-10)
2. Security risk level (low, medium, high)
3. Performance impact assessment
4. Maintainability score
5. Test coverage assessment
6. Recommended actions summary

Output as JSON format for tracking and analytics.
"

claude -p "$METRICS_PROMPT" \
    --output-format json \
    --max-turns 3 \
    > "metrics-${PR_NUMBER}-${REVIEW_DEPTH}.json"

# –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
jq -r '.result' "metrics-${PR_NUMBER}-${REVIEW_DEPTH}.json" > "metrics-${PR_NUMBER}-${REVIEW_DEPTH}-data.json"

echo -e "${BLUE}üìã Review Summary:${NC}"
echo -e "- Detailed review: review-${PR_NUMBER}-${REVIEW_DEPTH}.md"
echo -e "- Review data: review-${PR_NUMBER}-${REVIEW_DEPTH}.json"
echo -e "- PR information: pr-${PR_NUMBER}-info.json"
echo -e "- Code changes: pr-${PR_NUMBER}-diff.patch"
echo -e "- Metrics: metrics-${PR_NUMBER}-${REVIEW_DEPTH}-data.json"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏—Å—å
if [ -f "metrics-${PR_NUMBER}-${REVIEW_DEPTH}-data.json" ]; then
    echo -e "\n${BLUE}üìä Quick Metrics:${NC}"
    echo -e "$(cat "metrics-${PR_NUMBER}-${REVIEW_DEPTH}-data.json" | head -10)"
fi

echo -e "\n${GREEN}üéâ Smart review completed!${NC}"