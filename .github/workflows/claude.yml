name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Claude Proxy Bridge
        run: |
          echo "🔧 Starting Claude Proxy Bridge for GitHub Actions integration..."
          cd claude-proxy
          npm install
          # Start proxy in background
          nohup npm start > proxy.log 2>&1 &
          echo $! > proxy.pid
          sleep 10
          # Check if proxy is running
          if curl -f http://localhost:3000/health > /dev/null 2>&1; then
            echo "✅ Claude Proxy Bridge started successfully"
          else
            echo "❌ Failed to start Claude Proxy Bridge"
            cat proxy.log
            exit 1
          fi

      - name: Run Claude via Proxy Bridge
        id: claude
        continue-on-error: true  # Prevent API failures from blocking workflow
        run: |
          echo "🤖 Executing Claude via Proxy Bridge..."
          
          # Prepare the request
          cat > claude_request.json << 'EOF'
          {
            "action": "code_review",
            "direct_prompt": "Analyze this repository and provide code review suggestions. Focus on the Claude Proxy Bridge implementation and suggest any improvements.",
            "max_tokens": 2048,
            "context": {
              "repository": "${{ github.repository }}",
              "workflow": "${{ github.workflow }}",
              "event": "${{ github.event_name }}"
            }
          }
          EOF
          
          # Make request to our proxy
          response=$(curl -s -X POST http://localhost:3000/api/github-actions/claude \
            -H "Content-Type: application/json" \
            -H "X-GitHub-Repository: ${{ github.repository }}" \
            -H "X-GitHub-Workflow: ${{ github.workflow }}" \
            --data @claude_request.json)
          
          echo "📝 Claude Response:"
          echo "$response" | jq -r '.response // .error // "No response"'
          
          # Save response for status reporting
          echo "$response" > claude_response.json

      - name: Report Claude Status
        if: always()
        run: |
          echo "📊 Claude Proxy Bridge Status Report"
          echo "=================================="
          
          if [ "${{ steps.claude.outcome }}" = "failure" ]; then
            echo "⚠️ Claude proxy execution failed"
            echo "🔍 Checking proxy logs..."
            if [ -f claude-proxy/proxy.log ]; then
              echo "📋 Proxy logs:"
              tail -20 claude-proxy/proxy.log
            fi
            echo "📊 Possible causes:"
            echo "  - Claude Code SDK not available in GitHub Actions"
            echo "  - MAX subscription not accessible in CI environment"
            echo "  - Network connectivity issues"
            echo "  - Proxy startup failure"
          elif [ "${{ steps.claude.outcome }}" = "success" ]; then
            echo "✅ Claude proxy executed successfully"
            if [ -f claude_response.json ]; then
              echo "📝 Response summary:"
              cat claude_response.json | jq -r '.action // "unknown"'
            fi
          else
            echo "⏭️ Claude execution was skipped"
          fi
          
          # Cleanup proxy process
          if [ -f claude-proxy/proxy.pid ]; then
            echo "🧹 Cleaning up proxy process..."
            kill $(cat claude-proxy/proxy.pid) 2>/dev/null || true
            rm claude-proxy/proxy.pid
          fi
