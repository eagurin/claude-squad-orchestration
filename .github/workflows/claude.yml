name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        continue-on-error: true  # Prevent API failures from blocking workflow
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: "claude-sonnet-4-20250514"
          max_tokens: 4096
          allowed_tools: "Bash(npm install),Bash(npm run build),Bash(npm run test),Bash(npm run lint),Bash(npm run typecheck)"
          custom_instructions: |
            This is a Claude Squad Orchestration project with TypeScript/Node.js backend.
            Follow these guidelines:
            - Follow existing code style and patterns
            - Ensure all new code has proper TypeScript types
            - Run tests and linting before suggesting changes
            - Focus on the orchestration system and GitHub Actions workflows
            - Maintain compatibility with existing entities and database schema
            - Be concise in responses to stay within token limits

      - name: Report Claude Status
        if: always()
        run: |
          if [ "${{ steps.claude.outcome }}" = "failure" ]; then
            echo "‚ö†Ô∏è Claude execution failed - check API limits and configuration"
            echo "üìä Possible causes:"
            echo "  - API rate limits reached"
            echo "  - Network connectivity issues"
            echo "  - Invalid API key or configuration"
            echo "  - Service temporarily unavailable"
            echo "üîç Check the Claude action logs above for more details"
          elif [ "${{ steps.claude.outcome }}" = "success" ]; then
            echo "‚úÖ Claude executed successfully"
          else
            echo "‚è≠Ô∏è Claude execution was skipped"
          fi
